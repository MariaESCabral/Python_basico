# -*- coding: utf-8 -*-
"""Exercícios de função.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tv0oJwafa7X5qBSdKCYbvU2szODpeiRV
"""

#Exercícios de função
import math
#Faça uma função que recebe por parâmetro o raio de uma esfera e calcula o seu volume (v = 4/3 * Pi * R^3) .
def calcular_volume_esfera(raio):
    return (4/3) * math.pi * raio**3
#Faça uma função que recebe a idade de uma pessoa em anos, meses e dias e retorna essa idade expressa em dias.
def calcular_idade_em_dias(anos, meses, dias):
    return anos * 365 + meses * 30 + dias

#Faça uma função que recebe um valor inteiro e verifica se o valor é positivo ou negativo. A função deve voltar uma string escrito "positivo" ou "negativo“
def verificar_positivo_negativo(numero):
    if numero >= 0:
        return "positivo"
    else:
        return "negativo"

#Faça uma função que recebe um valor inteiro e verifica se o valor é par ou ímpar. A função deve retornar uma string com "par" ou "impar"
def verificar_par_impar(numero):
    if numero % 2 == 0:
        return "par"
    else:
        return "impar"

#Escreva um procedimento que recebe as 3 notas de um aluno por parâmetro e uma letra.
#Se a letra for A o procedimento calcula a média aritmética das notas do aluno, se for P, a sua média ponderada (pesos: 5, 3 e 2) e se for H, a sua média harmônica.
#A média calculada também deve retornar por parâmetro.
def calcular_media(notas, letra, media):
    if letra == 'A':
        media[0] = sum(notas) / len(notas)
    elif letra == 'P':
        pesos = [5, 3, 2]
        media[0] = sum(p * n for p, n in zip(pesos, notas)) / sum(pesos)
    elif letra == 'H':
        media[0] = len(notas) / sum(1 / n for n in notas)

#Faça um procedimento que recebe por parâmetro os valores necessário para o cálculo da fórmula de báskara e retorna, também por parâmetro, as suas raízes, caso seja possível calcular.
# Procedimento para calcular as raízes usando a fórmula de Bhaskara
def calcular_bhaskara(a, b, c, raizes):
    delta = b**2 - 4 * a * c

    if delta < 0:
        print("Não há raízes reais.")
    else:
        x1 = (-b + delta ** 0.5) / (2 * a)
        x2 = (-b - delta ** 0.5) / (2 * a)
        raizes.append(x1)
        raizes.append(x2)

a = float(input("Digite o valor de a: "))
b = float(input("Digite o valor de b: "))
c = float(input("Digite o valor de c: "))
raizes = []
calcular_bhaskara(a, b, c, raizes)
if len(raizes) == 0:
    print("Não há raízes reais.")
else:
    print(f"As raízes da equação são: {raizes}")

#Faça um procedimento que recebe, por parâmetro, um valor N e calcula e escreve a tabuada de 1 até N.
#Mostre a tabuada na forma:1 x N = N. 2 x N = 2N. N x N = N2 ​
# Procedimento para calcular e escrever a tabuada de 1 até N
def calcular_e_escrever_tabuada(N):
    for i in range(1, N + 1):
        resultado = i * N
        if i == N:
            print(f"{i} x {N} = {resultado ** 2}")
        else:
            print(f"{i} x {N} = {resultado}")

N = int(input("Digite um valor para N: "))
calcular_e_escrever_tabuada(N)